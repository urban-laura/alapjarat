<?php

function migrate_wp_views_api() {
  return array(
    'api' => 2.0,
  );  
}

function migrate_wp_menu() {

  $items['admin/wp-import'] = array(
    'title' => 'import data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migrate_wp_form'),
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'management',
    'type' => MENU_CALLBACK,
  );

  $items['admin/wp-import-items'] = array(
    'title' => 'Migrated items',
    'page callback' => 'migrate_wp_migrated_list',
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'management',
    'type' => MENU_CALLBACK,
  );

  $items['admin/export-users'] = array(
    'title' => 'Export users',
    'page callback' => 'migrate_wp_export_users',
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'management',
    'type' => MENU_CALLBACK,
  );

  $items['admin/wp-import-tests'] = array(
    'title' => 'Migrate tests users',
    'page callback' => 'migrate_wp_tests',
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'management',
    'type' => MENU_CALLBACK,
  );




  return $items;
}

function migrate_wp_form($form, &$form_state) {

  global $sources;

  $sources = array(
  	'wp0' => 'wp0',
  	'wp1' => 'wp1',
  	'wp2' => 'wp2',
  	'wp3' => 'wp3',
  	'wp4' => 'wp4',
  	//'wp30'=>'wp30',
  	//'wp35' => 'wp35',
  	//'wp40' => 'wp40',
  );

  $form['source']  = array(
  	'#type' => 'select',
  	'#options' => array_merge(array('select'=>'select'), $sources),
  	'#default_value' => 'wp40',
  );

  $form['source_all'] = array(
    '#type' => 'checkbox',
    '#title' => 'import all',
    '#default_value' => 1,
  );

  $form['migrate_terms'] = array(
    '#type' => 'checkbox',
    '#title' => 'terms',
    '#default_value' => 1,
  );

  $form['migrate_users'] = array(
    '#type' => 'checkbox',
    '#title' => 'users',
    '#default_value' => 1,
  );

  $form['migrate_posts'] = array(
    '#type' => 'checkbox',
    '#title' => 'articles',
    '#default_value' => 1,
  );

  $form['post_ids'] = array(
    '#type' => 'textfield',
    '#title' => 'Post IDs',
  );

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => 'Amount per round',
    '#default_value' => '10',
  );

  $form['migrate'] = array(
    '#type' => 'submit',
    '#value' => 'import',
    '#submit' => array('migrate_wp_form_migrate_submit'),
  );

  $form['generate_list'] = array(
    '#type' => 'submit',
    '#value' => 'generate list',
    '#submit' => array('migrate_wp_form_generate_list_submit'),
  );

  $form['fix_migration'] = array(
    '#type' => 'submit',
    '#value' => 'Fix migration',
    '#submit' => array('migrate_wp_form_fix_migration_submit'),
  );

  $query = db_select('migrate_wp', 'mwp')
  ->fields('mwp', array('nid'));
  $result = $query->execute()->fetchAll();

  if (count($result) > 0) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => 'delete',
      '#submit' => array('migrate_wp_form_migrate_delete_submit'),
      '#suffix'=>'<span class="count">'.count($result).' migrated element</span>',
    );
  }

  return $form;
}

function migrate_wp_form_migrate_delete_submit($form, &$form_state) {
  $amount = $form_state['values']['amount'];
  $query = db_select('migrate_wp', 'mwp')
  ->fields('mwp', array('nid', 'guid'))
  ->orderBy('nid', 'DESC')
  ->range(0,$amount);
  
  $results = $query->execute()->fetchAll();

  $batch = array(
    'title' => t('Deleting imported WP Content ...'),
    'operations' => array(),
    'init_message' => t('Deleting'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'migrate_wp_batch_finished',
    'progressive' => FALSE,
  );

  foreach ($results as $result) {
    $batch['operations'][] = array('migrate_wp_batch_worker_delete', array($result->nid)); 

  }

  batch_set($batch);

  batch_process();

}

function migrate_wp_form_migrate_submit($form, &$form_state) {
  global $sources;
  global $authors;
  global $attachments;
  global $refactor_categories;

  if ($form_state['values']['migrate_users'] == 1) {
    migrate_wp_export_users();
  }

  $attachments = [];

  if (!taxonomy_vocabulary_machine_name_load('glossary')) {
    $vocabulary = new stdClass();
    $vocabulary->name = 'Glossary';
    $vocabulary->machine_name = "glossary";
    $vocabulary->description = t('Alapjárat technikai kifejezések belső szótár.');
    $vocabulary->module = 'taxonomy';

    taxonomy_vocabulary_save($vocabulary);
  }

  if ($form_state['values']['source_all'] == 1) {
    $nodes = [];
    $terms = [];
    $post_ids = [];
    $counter = 0;
    if (!empty($form_state['values']['post_ids'])) {
      $post_ids = explode(',', $form_state['values']['post_ids']);
    }
    foreach ($sources as $source) {
      $import = xml2node($source, $form_state['values']['amount'], $counter);
      $import = xml2node($source, $form_state['values']['amount'], $counter, $post_ids);
      $nodes = array_merge($nodes, $import['articles']);
      $terms = array_merge($terms, $import['glossary']);

    }

  }
  elseif ($form_state['values']['source'] !== 'select') {
    $import = xml2node($source, $form_state['values']['amount'], array(16545));
    $nodes = $import['articles'];
  } 
     


  // Batch for terms
  $batch = array(
    'title' => t('Importing WP Content ...'),
    'operations' => array(),
    'init_message' => t('Importing'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'migrate_wp_batch_finished',
    'progressive' => FALSE,
  );

  if ($form_state['values']['migrate_terms'] == 1) {
    foreach ($terms as $term) {
      $batch['operations'][] = array('migrate_wp_batch_worker', array($term, 'term')); 
    }	
  }

  if ($form_state['values']['migrate_posts'] == 1) {
	  foreach ($nodes as $new_node) {
	    $batch['operations'][] = array('migrate_wp_batch_worker', array($new_node, 'article', $refactor_categories)); 
	  }
  }

	batch_set($batch);

	batch_process();
	
 
}

function migrate_wp_batch_worker($node_i, $type, $refactor_categories, &$context) {
  
  global $authors;

  if ($type == 'term') {
    $exists = taxonomy_get_term_by_name($node_i['name'], 'glossary');

    if (empty($exists)) {
      $new_term = new stdClass();
      $new_term->name = $node_i['name'];
      $new_term->description = strip_tags($node_i['description']);
      $vocabulary = taxonomy_vocabulary_machine_name_load('glossary');
      $new_term->vid = $vocabulary->vid;
      taxonomy_term_save($new_term);
    }
  }
  else {
	  $node = new stdClass();
	  $node->type = 'a_article';
	  node_object_prepare($node);  

    watchdog('migrate_wp', 'POST ID' . $node_i['post_id']);
    watchdog('migrate_wp', 'TITLE ' . $node_i['title']);
	  
	  $node->title = $node_i['title'];
    $node->field_subtitled[LANGUAGE_NONE][0]['value'] = $node_i['subtitle'];
    $node->field_subtitled[LANGUAGE_NONE][0]['format'] = 'text';

    $node->field_wp_post_id[LANGUAGE_NONE][0]['value'] = (int)$node_i['post_id'];

    $node->created = strtotime($node_i['post_date']);

	  $node->field_title2[LANGUAGE_NONE][0]['value'] = $node_i['title'];
    $node->field_title2[LANGUAGE_NONE][0]['format'] = 'text';

	  $node->language = LANGUAGE_NONE;

    if ($node_i['glossary_parser']) {
      $node->field_glossary_parser[LANGUAGE_NONE][0]['value'] = 1;
    } 

    $article_text = migrate_wp_embed_fb_videos($node_i['content']);
    $article_text = migrate_wp_remove_gallery_code($article_text);

	  $node->field_text[LANGUAGE_NONE][0]['value'] = $article_text;
    $node->field_text[LANGUAGE_NONE][0]['format'] = 'fullhtml';

    if (empty($node_i['author'])) {
      watchdog('migrate', 'TID ERROR');
    } else {
      $node->field_published[LANGUAGE_NONE][0]['tid'] = $node_i['author'];
    }
     

	  $node->field_meta_description[LANGUAGE_NONE][0]['value'] = $node_i['meta_desc'];
    $node->field_meta_description[LANGUAGE_NONE][0]['format'] = 'text';

	  //$node->field_tags['und'][0]['tid'] = migrate_wp_set_taxonomy_tid($node_i['category'], 'category');

	  $tids = [];
	  foreach ($node_i['tags'] as $tag) {
	  	$tids[] = array('tid' => migrate_wp_set_taxonomy_tid($tag, 'tags'));
	  }

	  if (!empty($tids)) {
	    $node->field_tagsa[LANGUAGE_NONE] = $tids;
	  }

	  if (isset($node_i['main_image'])) {
      $file = migrate_wp_file_get_managed($node_i['main_image']);

		  $node->field_image = array(
			  'und' => array(
			    0 => array(
			      'fid' => $file->fid,
			      'filename' => $file->filename,
			      'filemime' => $file->filemime,
			      'uid' => 1,
			      'uri' => $file->uri,
			      'status' => 1,
			      'display' => 1,
            'alt' => $node_i['title'],
			    )
			  )
			);
	  }

    if (!empty($node_i['gallery'])) {
      $images = [];
      foreach ($node_i['gallery'] as $image) {
        $file = migrate_wp_file_get_managed($image);
        $images[] = array(
            'fid' => $file->fid,
            'filename' => $file->filename,
            'filemime' => $file->filemime,
            'uid' => 1,
            'uri' => $file->uri,
            'status' => 1,
            'display' => 1
          );
      }
      $node->field_gallery = array(
        'und' => $images,
      );
    }
	    
	  $node->status = 1;

    //--
    if (!empty($node_i['main_heading'])) {
      $node->field_menu[LANGUAGE_NONE][0] = $node_i['main_heading'];
    }
    if (!empty($node_i['secondary_headings'])) {
      $node->field_secondary_menu[LANGUAGE_NONE] = $node_i['secondary_headings'];
    }
    if (!empty($node_i['categories'])) {
      $node->field_tags[LANGUAGE_NONE] = $node_i['categories'];
    }
    //--

    $alias = rtrim(str_replace('https://www.alapjarat.hu/', '', $node_i['link']), '/');
    $node->path = array(
      'alias' => $alias,
      'pathauto' => 0,    
    );

    $node->comment = 1;
    node_save($node); 

    // test - product review
    if (isset($node_i['test'])) {
      $node->field_test_name[LANGUAGE_NONE][0]['value'] = $node_i['test']['name'];
      $pros = unserialize($node_i['test']['pros']);

      $file = migrate_wp_file_get_managed($node_i['test']['image']);
      $image = array(
        'fid' => $file->fid,
        'filename' => $file->filename,
        'filemime' => $file->filemime,
        'uid' => 1,
        'uri' => $file->uri,
        'status' => 1,
        'display' => 1,
      );
      $node->field_test_image[LANGUAGE_NONE][0] = $image;
      
      $c = 0;
      foreach ($pros as $pro) {
        if (!empty($pro)) {
          $node->field_test_features_pro[LANGUAGE_NONE][$c]['value'] = $pro;
          $c++;
        }
      }

      $cons = unserialize($node_i['test']['cons']);
      $c = 0;
      foreach ($cons as $con) {
        if (!empty($con)) {
          $node->field_test_features_contra[LANGUAGE_NONE][$c]['value'] = $con;
          $c++;
        }
      }

      $options = unserialize($node_i['test']['options']);

      foreach ($options as $option) {
        $my_collection = entity_create('field_collection_item', array('field_name' => 'field_test_options'));
        $my_collection->setHostEntity('node', $node);
        $my_collection->field_test_option[LANGUAGE_NONE][0]['value'] = $option['name'];
        $my_collection->field_test_option_grade[LANGUAGE_NONE][0]['value'] = $option['value'];
        $my_collection->save();

      }

      node_save($node); 

    }
    
	  

    $path = array('source' => "node/$node->nid", 'alias' => $alias);
    path_save($path);

	  db_insert('migrate_wp')
	  ->fields(array(
	  	'nid' => $node->nid,
	  	'title' => $node_i['title'],
	  	'guid' => $node_i['guid'],
	  ))
	  ->execute();

    if (!empty($node_i['comments'])) {
      foreach ($node_i['comments'] as $item) {
        $comment = new stdClass();
        $comment->nid = $node->nid;
        $comment->cid = 0;
        $comment->pid = 0;
        $comment->uid = 0;
        $comment->mail = $item['mail'];
        $comment->name = $item['name'];
        $comment->hostname = $item['hostname'];
        $comment->created = $item['created'];
        $comment->date = $item['created'];
        $comment->changed = $item['created'];
        $comment->is_anonymous = 0;
        $comment->homepage = '';
        $comment->status = COMMENT_PUBLISHED;
        $comment->language = LANGUAGE_NONE;
        $comment->comment_body[$comment->language][0]['value'] = $item['body'];
        $comment->comment_body[$comment->language][0]['format'] = 'filtered_html'; 
        comment_submit($comment);
        $comment->created = $item['created'];
        $comment->date = $item['created'];
        $comment->changed = $item['created'];
        comment_save($comment);
      }
    }

    $context['results']['processed']++;
    $context['message'] = $new_node['title'] . ' saved.';
  }
}

function migrate_wp_file_get_managed($path) {
  $uri = str_replace('https://www.alapjarat.hu/', '', $path);
  $parts = explode('/', $path);
  $filename = $parts[count($parts) - 1];
  //$file = file_save_data($image, 'public://' . $filename,FILE_EXISTS_REPLACE);
  $file = new stdClass;
  $file->uid = 1;
  $file->filename = $filename;
  $file->uri = 'public://' . $uri;
  $file->status = 1;
  $file->filemime = mime_content_type('public://' . $uri);
  $files = file_load_multiple(array(), array('uri' => $file->uri));
  $file_exists = reset($files);
  if (!$file_exists) {
    file_save($file);
  } else {
    $file = $file_exists;
  }

    return $file;
}

function migrate_wp_batch_finished($success, $results, $operations) {
  global $attachments;

  if ($success) {
    $message = format_plural($results['processed'], 'One node processed.', '@count nodes processed.');
    drupal_set_message($message);
  }
  else {
    $message = 'some errors';
    drupal_set_message($message);
  }
  
  drupal_set_message(l('Run again', '/wp-import'));

}

function migrate_wp_check($guid) {
	$query = db_select('migrate_wp', 'mwp')
	->fields('mwp', array('nid', 'guid'))
	->condition('mwp.guid', $guid, '=');
	
	$result = $query->execute()->fetchAll();

  if (count($result) > 0) {
  	return TRUE;
  }

  return FALSE;
}

function migrate_wp_batch_worker_delete($nid, &$context) {


    $node = node_load($nid);
    $fc_items = field_get_items('node', $node, 'field_test_options');
   
    foreach ($fc_items as $fc_item) {
      entity_delete_multiple('field_collection_item', array($fc_item['value']));
    }
   
    

    node_delete($nid);

    db_delete('migrate_wp')
  	->condition('nid', $nid)
  	->execute(); 


  	

    $context['results']['processed']++;
    $context['message'] = $context['results']['processed'] . ' deleted.';
  
}

function migrate_wp_set_taxonomy_tid($tag = 'test', $voc = 'category') {
	$exist = taxonomy_get_term_by_name($tag, $voc);

	if (empty($exist)) {
		$vocabulary = taxonomy_vocabulary_machine_name_load($voc);
		$term = new stdClass();
		$term->vid = $vocabulary->vid;
		$term->name = $tag;
		taxonomy_term_save($term);

		return $term->tid;
	}

	return reset($exist)->tid;
}

function migrate_wp_curl_get_contents($url, $post = NULL) {



  if (isset($_POST['api_url'])) {
    $ch = curl_init($_POST['api_url']);
  }
  else {
    $ch = curl_init($url);
  }

  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);

  if (isset($_POST['params'])) {
    $params = str_replace('|', '&', $_POST['params']);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
  }

  $params = '';
  if (isset($post)) {
    
    curl_setopt($ch, CURLOPT_POST, 1);
      
    $params = 'api=1';
    foreach ($post as $key => $value) {       
      $params .= '&' . $key . '=' . $value;
    }
    
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
  }

  $data = curl_exec($ch);
  $status=curl_getinfo($ch);
  curl_close($ch);



  if (isset($_POST['api_url']) && $status['http_code']==200) {
    print $data;
    return;
  }
  if (isset($_POST['api_url']) && $status['http_code']!==200) {
    print 'error';
    //print json_encode($status);
    return;
  }

  if($status['http_code'] == 200)
    {
          

        return $data;
    }
    elseif($status['http_code']==301 || $status['http_code']==302)
    {
        if (!$follow_allowed)
        {
            if (!empty($status['redirect_url']))
            {
                $redirURL=$status['redirect_url'];
            }
            else
            {
                preg_match('/href\=\"(.*?)\"/si',$data,$m);
                if (!empty($m[1]))
                {
                    $redirURL=$m[1];
                }
            }
            if(!empty($redirURL))
            {
                return  call_user_func( __FUNCTION__, $redirURL, $post_paramtrs);
            }
        }
    }
   
    return;
  
  
}

function migrate_wp_migrated_list() {
  $query = db_select('migrate_wp', 'mwp')
  ->fields('mwp', array('nid'));
  $result = $query->execute()->fetchAll();
  $results = $query->execute()->fetchAll();


  foreach ($results as $row) {
    $nids[] = $row->nid;
  }



  //$view = views_embed_view('migrate_list', 'default', $nids);
  $view = views_get_view('migrate_list');
  $view->set_arguments(array(implode(',', $nids)));
  $views = $view->preview('default');
  $view->destroy();

  return $views;

}

function xml2node($source, $amount, &$counter, $posts = array()) {
  global $attachments;
  global $authors;
  
  $refactor_categories = migrate_wp_refactor_categories();
  //$posts = array(22199);
  //$posts = array(23152); // galéria
  //$posts = array(16545);

  $filename = 'sites/all/modules/migrate_wp/source/' . $source . '.xml';

  $data = file_get_contents($filename);
  $data = str_replace('content:encoded', 'content', $data);
  $data = str_replace('dc:creator', 'creator', $data);
  $data = str_replace('wp:post_id', 'post_id', $data);
  $data = str_replace('wp:post_date', 'post_date', $data);
  $data = str_replace('wp:postmeta', 'postmeta', $data);
  $data = str_replace('wp:comment', 'comment', $data);
  $data = str_replace('wp:meta_key', 'meta_key', $data);
  $data = str_replace('wp:meta_value', 'meta_value', $data);
  $data = str_replace('wp:post_type', 'post_type', $data);
  $data = str_replace('wp:attachment_url', 'attachment_url', $data);
  
  $data = str_replace('wp:meta_value', 'meta_value', $data);
  $xml = simplexml_load_string($data, 'SimpleXMLElement', LIBXML_COMPACT | LIBXML_PARSEHUGE);
  //$json = json_encode($xml);
  //$array = json_decode($json,TRUE);
  $fields = array('title', 'link', 'post_id', 'post_date', 'creator', 'guid', 'content');

  // get already imported items
  $query = db_select('migrate_wp', 'mwp')
  ->fields('mwp', array('nid', 'title'));
  $result = $query->execute()->fetchAll();

  $migrated = [];
  foreach ($result as $row) {
    $migrated[] = $row->title;
  }

  // get attachments
  
  foreach ($xml->channel->item as $key=>$val) {
    
    if ((string)$val->post_type !== 'attachment') {
      continue;
    }
    $post_id = (int)$val->post_id;
    $attachments[$post_id] = (string)$val->attachment_url;
  }

  
  // get glossary 
  
  $glossary = [];
  foreach ($xml->channel->item as $key=>$val) {
    
    if ((string)$val->post_type !== 'glossary') {
      continue;
    }
    $name = (string)$val->title;
    $content = (string)$val->content;
    $glossary[] = array(
      'name' => $name,
      'description' => $content,
    );
  }
  
  // get posts
  $nodes = [];

  foreach ($xml->channel->item as $key=>$val) {
    if ((string)$val->post_type !== 'post') {
      continue;
    }

    $post_id = (int)$val->post_id;
    
    if (in_array((string)$val->title, $migrated)) {
      continue;
    }

    if (!empty($posts)) { 
      if (!in_array($post_id, $posts)) {
        continue;
      } 
    } else {
      
      if ($counter > $amount-1) {
        break 1;
      }
      $counter++;
    }

    $node = [];
    foreach ($fields as $field) {
      $node[$field] = ((string)$val->{$field});
    }

    //find gallery
    $pattern = '/\[gallery.*?ids="(.*?)"\]/ms';
    preg_match_all($pattern, ((string)$val->content), $gallery);

    if (!empty($gallery[1])) {
      $images = [];
      $gal_images = explode(',', $gallery[1][0]);
      foreach ($gal_images as $img_id) {
        $images[] = $attachments[$img_id];
      }

      $node['gallery'] = $images;
    }

    $node['author'] = $authors[(string)$val->creator]['tid'];
    
    // taxonomy
    $tags = [];
    foreach ($val->category as $key=>$cat) {
      $type = (string)$cat['domain'];
      if ($type == 'post_tag') {
        $tags[] = (string)$cat;
      }
      if ($type == 'category') {
        $category = (string)$cat;
      }
    }
    $node['tags'] = $tags;
    

    // Headings and categories.
    $node['main_heading'] = $refactor_categories[(string)$val->link]['primary_menu'];
    $node['secondary_headings'] = $refactor_categories[(string)$val->link]['secondary_menu'];
    $node['categories'] = $refactor_categories[(string)$val->link]['categories'];



    $key = '';
    $thumbnail = '';
    $meta_desc = '';
    $glossary_parser = TRUE;
    $prod_review = [];
    foreach ($val->postmeta as $postmeta) {
      foreach ($postmeta as $item) {
        if ($key == '') {
          $key = (string)$item;
        } else {
          $value = (string)$item;
          if ($key == '_aioseop_opengraph_settings') {
           
            $meta = _mb_unserialize($value);
            if ($meta == null) {

            }
          }
          if ($key == '_thumbnail_id') {
            $thumbnail = $value;
          }
          if ($key == '_glossary_disable_for_page') {
            if ($value == 1) {
              $glossary_parser = FALSE;
            }
          }
          if ($key == 'cwp_rev_product_name') {
            $prod_review['name'] = $value;
          }
          if ($key == 'cwp_rev_product_image') {
            $prod_review['image'] = $value;
          }
          if ($key == 'wppr_rating') {
            $prod_review['rating'] = $value;
          }
          if ($key == 'wppr_pros') {
            $prod_review['pros'] = $value;
          }
          if ($key == 'wppr_cons') {
            $prod_review['cons'] = $value;
          }
          if ($key == 'wppr_options') {
            $prod_review['options'] = $value;
          }

          $key = '';
        }
      }
    }

    $node['glossary_parser'] = $glossary_parser;
    $node['main_image'] = $attachments[$thumbnail];

    if ($meta) {
      if (isset($meta['aioseop_opengraph_settings_image'])) {
        $node['meta_image'] = $meta['aioseop_opengraph_settings_image'];
      } 
      
      if (isset($meta['aioseop_opengraph_settings_desc'])) {
        $node['meta_desc'] = $meta['aioseop_opengraph_settings_desc'];
      }
    }

    $node['comments'] = array();
    $nrow = array();
    foreach ($val->comment as $comment) {
      foreach ($comment as $item) {
          $nrow[] = (string)$item;
      }

      $node['comments'][] = array(
        'mail' => $nrow[2],
        'name' => $nrow[1],
        'hostname'=>$nrow[4],
        'created' => strtotime($nrow[5]),
        'body' => $nrow[7],
      );
    }

    if (!empty($prod_review)) {
      $node['test'] = $prod_review;
    }

    if (strrpos($node['content'], '[mc4wp_form')) {
      $node['content'] = substr($node['content'], 0, strrpos($node['content'], '[mc4wp_form'));
    } 

    $pattern = '/<h2>(.*?)<\/h2>/';
    preg_match_all($pattern, $node['content'], $matches);
    if (isset($matches[1]) && isset($matches[1][0])) {
      $node['subtitle'] = $matches[1][0];
    }

    $node['content'] = preg_replace('/<h2>.*?<\/h2>/', '', $node['content']);
    $node['content'] = preg_replace('/\[caption.*?\](<img.*?>)(.*?)\[\/caption\]/', '$1<br><figcaption>$2</figcaption><br>', $node['content']);

    $nodes[] = $node;
  }

  return array(
    'articles' => $nodes,
    'glossary' => $glossary,
  );
}

function migrate_wp_export_users() {
  global $authors;

  $data = file_get_contents(drupal_get_path('module', 'migrate_wp') . '/source/wp0.xml');
  $pattern = '/<wp:author_login>(.*?)<\/wp:author_login>.*?<wp:author_email>(.*?)<\/wp:author_email>.*?<wp:author_first_name><!\[CDATA\[(.*?)\]\]><\/wp:author_first_name>.*?<wp:author_last_name><!\[CDATA\[(.*?)\]\]><\/wp:author_last_name>/ms';
  preg_match_all($pattern, $data, $user_data);


  $authors = [];
  for ($c = 0; $c < count($user_data[1]); $c++) {
    

    //---
    $author = taxonomy_get_term_by_name($user_data[4][$c] . ' ' . $user_data[3][$c]);

    if (!empty($author)) {
      $author = reset($author);

    } else {
      $author = new stdClass();
      $author->name = $user_data[4][$c] . ' ' . $user_data[3][$c];
      $author->field_machine_name[LANGUAGE_NONE][0]['value'] = $user_data[1][$c];
      $vocabulary = taxonomy_vocabulary_machine_name_load('published');
      $author->vid = $vocabulary->vid;
      taxonomy_term_save($author);

    }

    $authors[$user_data[1][$c]] = array(
      'email' => $user_data[2][$c],
      'name' => $user_data[4][$c] . ' ' . $user_data[3][$c],
      'tid' => $author->tid,
    ); 
  }
}

function migrate_wp_find_glossary($text, $node = null) {
  
  if (is_null($node) || $node->field_glossary_parser[LANGUAGE_NONE][0]['value'] == 1) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('glossary');
    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));

    foreach ($terms as $term) {
      $pattern = "/(?!<.*?)(\b" . str_replace('/', "\/", $term->name) . "\b)(?![^<>]*?>)/iu";
      $alias = drupal_get_path_alias('taxonomy/term/' . $term->tid);
      $replace = '<a href="/' . $alias . '" title="' . $term->description . '" class="glossary">$1</a>';
      $text = preg_replace($pattern , $replace,  $text);
    }
  }

  $pattern = "/www.alapjarat.hu\/wp-content\/uploads/iu";
  $replace = "www.alapjarat.hu/sites/default/files/wp-content/uploads";
  $text = preg_replace($pattern , $replace,  $text);

  return $text;
}

function migrate_wp_remove_gallery_code($text) {

  $pattern = '/\[gallery.*?ids="(.*?)"\]/iu';
  $replace = '';
  $text = preg_replace($pattern , $replace,  $text);

  return $text;
}

function migrate_wp_embed_fb_videos($text) {
  $search = "/https:\/\/www.facebook.com\/alapjarat\/videos\/(.*?)\//iu";
  $replace = "<iframe src=\"https://www.facebook.com/plugins/post.php?href=https://www.facebook.com/alapjarat/videos/$1&width=500&height=889&show_text=true&appId\" width=\"500\" height=\"889\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>";
  $text = preg_replace($search , $replace,  $text);

  return $text;
}


function migrate_wp_form_generate_list_submit($form, &$form_state) {
  global $sources;

  $nodes = [];
  $counter = 0;
  foreach ($sources as $source) {
    $import = xml2node($source, $form_state['values']['amount'], $counter);
    $nodes = array_merge($nodes, $import['articles']);
  }


  $fp = fopen(drupal_get_path('module', 'migrate_wp') . '/list/list.csv', 'w');
  fprintf($fp, "\xEF\xBB\xBF");
  $c = 0;
  foreach ($nodes as $node) {
    $c++;
    fputcsv($fp, array(
      (string)$c,
      $node['post_date'],
      $node['title'],
      $node['category'],
      "=HYPERLINK(\"".$node['link']."\")",
    ));
  }
  fclose($fp);
  


}

function _mb_unserialize($string) {
    $string2 = preg_replace_callback(
        '!s:(\d+):"(.*?)";!s',
        function($m){
            $len = strlen($m[2]);
            $result = "s:$len:\"{$m[2]}\";";
            return $result;

        },
        $string);
    return unserialize($string2);
}  

function migrate_wp_refactor_categories() {

  $vocabulary = taxonomy_vocabulary_machine_name_load('menu');
  $terms_menu = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $menu_tids = [];
  foreach ($terms_menu as $item) {
    $menu_tids[$item->name] = $item->tid;
  }
  
  $vocabulary = taxonomy_vocabulary_machine_name_load('category');
  $terms_cat = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $cat_tids = [];
  foreach ($terms_cat as $item) {
    $cat_tids[$item->name] = $item->tid;
  }

  $filename = 'sites/all/modules/migrate_wp/source/categories_refactor.csv';
  $file = file_get_contents($filename);

  $bigdata = str_getcsv($file, "\n");

  $c = 0;
  foreach ($bigdata as $row) {
    $items = explode(';', $row);
    $c++;
    if ($c == 1) {
      continue; 
    }

    if (empty($menu_tids[$items[4]])) {
      
    }

    $secs = [];
    $secondary = explode(',', $items[5]);
    foreach ($secondary as $sec) {
      if (!isset($menu_tids[$sec])) {
        
      } else {
        $secs[] = array('tid'=>$menu_tids[$sec]);
      }
    }

    $cats = [];
    $category = explode(',', $items[6]);
    foreach ($category as $cat) {
      if (!isset($cat_tids[$cat])) {
        
      } else {
        $cats[] = array('tid'=>$cat_tids[$cat]);
      }
    }
    
    $data[trim($items[1])] = array(
      'primary_menu' => array('tid'=>$menu_tids[$items[4]]),
      'secondary_menu' => $secs,
      'categories' => $cats,
    );



  }

/*  
  print('<pre>');
   print_r($data);
   print('</pre>');
   die();
   */
   
   return $data;
}



function migrate_wp_tests() {
  $filename = 'sites/all/modules/migrate_wp/source/categories_refactor.csv';
  $file = file_get_contents($filename);
  $bigdata = str_getcsv($file, "\n");

  $c = 0;
  foreach ($bigdata as $row) {
    $items = explode(';', $row);


    $query = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('title', $items[2])
    ->execute()
    ->fetchAll();

    if (count($query) == 0) {
      dpm($items[2]);
    }

    $c++;
    if ($c > 2000) {
      break 1;
    }

  }
  return '1';
}

function migrate_wp_form_fix_migration_submit($form, &$form_state) {
  global $sources;
   $c = 0;

  foreach ($sources as $source) {

    $filename = 'sites/all/modules/migrate_wp/source/' . $source . '.xml';

    $data = file_get_contents($filename);
    $data = str_replace('content:encoded', 'content', $data);
    $data = str_replace('dc:creator', 'creator', $data);
    $data = str_replace('wp:post_id', 'post_id', $data);
    $data = str_replace('wp:post_date', 'post_date', $data);
    $data = str_replace('wp:postmeta', 'postmeta', $data);
    $data = str_replace('wp:comment', 'comment', $data);
    $data = str_replace('wp:meta_key', 'meta_key', $data);
    $data = str_replace('wp:meta_value', 'meta_value', $data);
    $data = str_replace('wp:post_type', 'post_type', $data);
    $data = str_replace('wp:attachment_url', 'attachment_url', $data);

    $data = str_replace('wp:meta_value', 'meta_value', $data);
    $xml = simplexml_load_string($data, 'SimpleXMLElement', LIBXML_COMPACT | LIBXML_PARSEHUGE);
    //$json = json_encode($xml);
    //$array = json_decode($json,TRUE);
    $fields = array('title', 'link', 'post_id', 'post_date', 'creator', 'guid', 'content');

    // get posts
    $nodes = [];
   
    foreach ($xml->channel->item as $key=>$val) {
      $body = ((string)$val->content);
      $post_id = ((string)$val->post_id);
      if (strpos($body, 'playbuzz') > 0) {
        $c++;

        $node = migrate_wp_node_by_postid($post_id);
        $node = reset($node);
        $pattern = '/(<script>.*?<\/div>)/msu';
        preg_match_all($pattern, $body, $matches);

        if (count($matches[1]) == 0) {
          $pattern = '/(<script.*?>.*?<\/div>)/msu';
          preg_match_all($pattern, $body, $matches);
        }

        $node->field_quiz[LANGUAGE_NONE][0]['value'] = $matches[1][0];
        node_save($node);
        watchdog('migrate_wp', 'Quiz injected:' . $node->nid);
        $nids[] = $node->nid;
      }
    }
  }

  dpm(implode('|', $nids));
}


function migrate_wp_node_by_postid($post_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'a_article')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_wp_post_id', 'value', $post_id, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $news_items_nids = array_keys($result['node']);
    $news_items = entity_load('node', $news_items_nids);
  } 

  return $news_items;
}