<?php

function migrate_wp_views_api() {
  return array(
    'api' => 2.0,
  );  
}

function migrate_wp_menu() {

  $items['admin/wp-import'] = array(
    'title' => 'import data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migrate_wp_form'),
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'management',
    'type' => MENU_CALLBACK,
  );

  $items['admin/wp-import-items'] = array(
    'title' => 'Migrated items',
    'page callback' => 'migrate_wp_migrated_list',
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'management',
    'type' => MENU_CALLBACK,
  );

  $items['admin/export-users'] = array(
    'title' => 'Export users',
    'page callback' => 'migrate_wp_export_users',
    'access arguments' => array(array('authenticated user')),
    'menu_name' => 'management',
    'type' => MENU_CALLBACK,
  );


  return $items;
}

function migrate_wp_form($form, &$form_state) {

  global $sources;

  $query = db_select('migrate_wp', 'mwp')
  ->fields('mwp', array('nid'));
  $result = $query->execute()->fetchAll();

  if (count($result) > 0) {
  	$form['migrate'] = array(
      '#type' => 'submit',
      '#value' => 'delete',
      '#submit' => array('migrate_wp_form_migrate_submit'),
    );

    return $form;
  }



  $sources = array(
  	'wp05' => 'wp05',
  	'wp10'=>'wp10',
  	'wp15' => 'wp15',
  	'wp20' => 'wp20',
  	'wp25' => 'wp25',
  	//'wp30'=>'wp30',
  	//'wp35' => 'wp35',
  	//'wp40' => 'wp40',
  );

  $form['source']  = array(
  	'#type' => 'select',
  	'#options' => array_merge(array('select'=>'select'), $sources),
  	'#default_value' => 'wp40',
  );

  $form['source_all'] = array(
    '#type' => 'checkbox',
    '#title' => 'import all',
  );

  $form['block_node_save'] = array(
    '#type' => 'checkbox',
    '#title' => 'block node save',
  );

  $form['migrate'] = array(
    '#type' => 'submit',
    '#value' => 'import',
    '#submit' => array('migrate_wp_form_migrate_submit'),
  );

  $form['generate_list'] = array(
    '#type' => 'submit',
    '#value' => 'generate list',
    '#submit' => array('migrate_wp_form_generate_list_submit'),
  );

  return $form;
}

function migrate_wp_form_migrate_submit($form, &$form_state) {
  global $sources;
  global $authors;
  global $attachments;

  $attachments = [];

  if (!taxonomy_vocabulary_machine_name_load('glossary')) {
    $vocabulary = new stdClass();
    $vocabulary->name = 'Glossary';
    $vocabulary->machine_name = "glossary";
    $vocabulary->description = t('Alapjárat technikai kifejezések belső szótár.');
    $vocabulary->module = 'taxonomy';

    taxonomy_vocabulary_save($vocabulary);
  }

  if ($form_state['values']['migrate'] == 'delete') {
  	$query = db_select('migrate_wp', 'mwp')
  	->fields('mwp', array('nid', 'guid'));
  	
  	$results = $query->execute()->fetchAll();

  	$batch = array(
  		'title' => t('Deleting imported WP Content ...'),
  		'operations' => array(),
  		'init_message' => t('Deleting'),
  		'progress_message' => t('Processed @current out of @total.'),
  		'error_message' => t('An error occurred during processing'),
  		'finished' => 'migrate_wp_batch_finished',
  		'progressive' => FALSE,
  	);

  	foreach ($results as $result) {
  	  $batch['operations'][] = array('migrate_wp_batch_worker_delete', array($result->nid)); 

  	}

  	batch_set($batch);

  	batch_process();

  	

  	return 1;
  }

  if ($form_state['values']['source_all'] == 1) {
    $nodes = [];
    $terms = [];
    foreach ($sources as $source) {
      $import = xml2node($source);
      $nodes = array_merge($nodes, $import['articles']);
      $terms = array_merge($terms, $import['glossary']);
    }

  }
  elseif ($form_state['values']['source'] !== 'select') {
    $import = xml2node($source, array(16545));
    $nodes = $import['articles'];
  } 
      /*
      $rawFeed = file_get_contents($filename);
      $xml = new SimpleXmlElement($rawFeed);
      dpm($xml);
  	foreach ($xml->channel->item as $item) {

  	  dpm($item);
  	}
  	*/

	if ($form_state['values']['block_node_save'] == 0) {
    // Batch for terms
    $batch = array(
      'title' => t('Importing WP Content ...'),
      'operations' => array(),
      'init_message' => t('Importing'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('An error occurred during processing'),
      'finished' => 'migrate_wp_batch_finished',
      'progressive' => FALSE,
    );

    foreach ($terms as $term) {
      $batch['operations'][] = array('migrate_wp_batch_worker', array($term, 'term')); 
    }	

		foreach ($nodes as $new_node) {
		  $batch['operations'][] = array('migrate_wp_batch_worker', array($new_node, 'article')); 
		}

		batch_set($batch);

		batch_process();
	} else {
		dpm($node);
	}
 
}

function migrate_wp_batch_worker($node_i, $type, &$context) {
  
  global $authors;

  if ($type == 'term') {
    $exists = taxonomy_get_term_by_name($node_i['name'], 'glossary');

    if (empty($exists)) {
      $new_term = new stdClass();
      $new_term->name = $node_i['name'];
      $new_term->description = strip_tags($node_i['description']);
      $vocabulary = taxonomy_vocabulary_machine_name_load('glossary');
      $new_term->vid = $vocabulary->vid;
      taxonomy_term_save($new_term);
    }
  }
  else {
    migrate_wp_export_users();

	  $node = new stdClass();
	  $node->type = 'a_article';
	  node_object_prepare($node);  
	  
	  $node->title = $node_i['title'];
	  $node->field_title2[LANGUAGE_NONE][0]['value'] = $node_i['title'];
	  $node->language = LANGUAGE_NONE;

    if ($node_i['glossary_parser']) {
      $article_text = migrate_wp_find_glossary($node_i['content']);
    } else {
      $article_text = $node_i['content'];
    }

	  $node->field_text[LANGUAGE_NONE][0]['value'] = $article_text;
    $node->field_text[LANGUAGE_NONE][0]['format'] = 'fullhtml';

    $author = taxonomy_get_term_by_name($authors[$node_i['creator']]['name']);

    if (!empty($author)) {
      $author = reset($author);

    } else {
      $author = new stdClass();
      $author->name = $authors[$node_i['creator']['name']];
      $vocabulary = taxonomy_vocabulary_machine_name_load('published');
      $author->vid = $vocabulary->vid;
      taxonomy_term_save($author);

    }

    $node->field_published[LANGUAGE_NONE][0]['tid'] = $author->tid;
     

	  $node->field_meta_description[LANGUAGE_NONE][0]['value'] = $node_i['meta_desc'];

	  $node->field_tags['und'][0]['tid'] = migrate_wp_set_taxonomy_tid($node_i['category'], 'category');

	  $tids = [];
	  foreach ($node_i['tags'] as $tag) {
	  	$tids[] = array('tid' => migrate_wp_set_taxonomy_tid($tag, 'tags'));
	  }

	  if (!empty($tids)) {
	    $node->field_tagsa[LANGUAGE_NONE] = $tids;
	  }

	  if (isset($node_i['main_image'])) {
      $file = migrate_wp_file_get_managed($node_i['main_image']);

		  $node->field_image = array(
			  'und' => array(
			    0 => array(
			      'fid' => $file->fid,
			      'filename' => $file->filename,
			      'filemime' => $file->filemime,
			      'uid' => 1,
			      'uri' => $file->uri,
			      'status' => 1,
			      'display' => 1
			    )
			  )
			);
	  }

    if (!empty($node_i['gallery'])) {

      foreach ($node_i['gallery'] as $image) {
        $file = migrate_wp_file_get_managed($image);
        $images[] = array(
            'fid' => $file->fid,
            'filename' => $file->filename,
            'filemime' => $file->filemime,
            'uid' => 1,
            'uri' => $file->uri,
            'status' => 1,
            'display' => 1
          );
      }
      $node->field_gallery = array(
        'und' => $images,
      );
    }
	    
	  $node->status = 1;
	  
	  node_save($node); 

	  db_insert('migrate_wp')
	  ->fields(array(
	  	'nid' => $node->nid,
	  	'title' => $node_i['title'],
	  	'guid' => $node_i['guid'],
	  ))
	  ->execute();

    $context['results']['processed']++;
    $context['message'] = $new_node['title'] . ' saved.';
  }
}

function migrate_wp_file_get_managed($path) {
  $uri = str_replace('https://www.alapjarat.hu/', '', $path);
  $parts = explode('/', $path);
  $filename = $parts[count($parts) - 1];
  //$file = file_save_data($image, 'public://' . $filename,FILE_EXISTS_REPLACE);
  $file = new stdClass;
  $file->uid = 1;
  $file->filename = $filename;
  $file->uri = 'public://' . $uri;
  $file->status = 1;
  $file->filemime = mime_content_type('public://' . $uri);

  $files = file_load_multiple(array(), array('uri' => $file->uri));
  $file_exists = reset($files);
  if (!$file_exists) {
    file_save($file);
  } else {
    $file = $file_exists;
  }

    return $file;
}

function migrate_wp_batch_finished($success, $results, $operations) {
  global $attachments;

  if ($success) {
    $message = format_plural($results['processed'], 'One node processed.', '@count nodes processed.');
    drupal_set_message($message);
  }
  else {
    $message = 'some errors';
    drupal_set_message($message);
  }
  
  drupal_set_message(l('Run again', '/wp-import'));
    dpm($attachments);
}

function migrate_wp_check($guid) {
	$query = db_select('migrate_wp', 'mwp')
	->fields('mwp', array('nid', 'guid'))
	->condition('mwp.guid', $guid, '=');
	
	$result = $query->execute()->fetchAll();

  if (count($result) > 0) {
  	return TRUE;
  }

  return FALSE;
}

function migrate_wp_batch_worker_delete($nid, &$context) {


    

    node_delete($nid);

    db_delete('migrate_wp')
  	->condition('nid', $nid)
  	->execute(); 
  	

    $context['results']['processed']++;
    $context['message'] = $context['results']['processed'] . ' deleted.';
  
}

function migrate_wp_set_taxonomy_tid($tag = 'test', $voc = 'category') {
	$exist = taxonomy_get_term_by_name($tag, $voc);

	if (empty($exist)) {
		$vocabulary = taxonomy_vocabulary_machine_name_load($voc);
		$term = new stdClass();
		$term->vid = $vocabulary->vid;
		$term->name = $tag;
		taxonomy_term_save($term);

		return $term->tid;
	}

	return reset($exist)->tid;
}

function migrate_wp_curl_get_contents($url, $post = NULL) {



  if (isset($_POST['api_url'])) {
    $ch = curl_init($_POST['api_url']);
  }
  else {
    $ch = curl_init($url);
  }

  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);

  if (isset($_POST['params'])) {
    $params = str_replace('|', '&', $_POST['params']);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
  }

  $params = '';
  if (isset($post)) {
    
    curl_setopt($ch, CURLOPT_POST, 1);
      
    $params = 'api=1';
    foreach ($post as $key => $value) {       
      $params .= '&' . $key . '=' . $value;
    }
    
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
  }

  $data = curl_exec($ch);
  $status=curl_getinfo($ch);
  curl_close($ch);



  if (isset($_POST['api_url']) && $status['http_code']==200) {
    print $data;
    return;
  }
  if (isset($_POST['api_url']) && $status['http_code']!==200) {
    print 'error';
    //print json_encode($status);
    return;
  }

  if($status['http_code'] == 200)
    {
          //dpm("ERRORCODE22 with $url!!<br/>Last status codes<b/>:".json_encode($status)."<br/><br/>Last data got<br/>:$data");

        return $data;
    }
    elseif($status['http_code']==301 || $status['http_code']==302)
    {
        if (!$follow_allowed)
        {
            if (!empty($status['redirect_url']))
            {
                $redirURL=$status['redirect_url'];
            }
            else
            {
                preg_match('/href\=\"(.*?)\"/si',$data,$m);
                if (!empty($m[1]))
                {
                    $redirURL=$m[1];
                }
            }
            if(!empty($redirURL))
            {
                return  call_user_func( __FUNCTION__, $redirURL, $post_paramtrs);
            }
        }
    }
    //dpm("ERRORCODE22 with $url!!<br/>Last status codes<b/>:".json_encode($status)."<br/><br/>Last data got<br/>:$data");
    return;
  
  
}

function migrate_wp_migrated_list() {
  $query = db_select('migrate_wp', 'mwp')
  ->fields('mwp', array('nid'));
  $result = $query->execute()->fetchAll();
  $results = $query->execute()->fetchAll();

  dpm($results);
  dpm(array_keys($results));

  foreach ($results as $row) {
    $nids[] = $row->nid;
  }

  dpm($nids);

  //$view = views_embed_view('migrate_list', 'default', $nids);
  $view = views_get_view('migrate_list');
  $view->set_arguments(array(implode(',', $nids)));
  $views = $view->preview('default');
  $view->destroy();

  return $views;

}

function xml2node($source, $posts = array()) {
  global $attachments;

  
  //$posts = array(22199);
  //$posts = array(23152); // galéria
  //$posts = array(16545);

  $filename = 'sites/all/modules/migrate_wp/source/' . $source . '.xml';

  $data = file_get_contents($filename);
  $data = str_replace('content:encoded', 'content', $data);
  $data = str_replace('dc:creator', 'creator', $data);
  $data = str_replace('wp:post_id', 'post_id', $data);
  $data = str_replace('wp:post_date', 'post_date', $data);
  $data = str_replace('wp:postmeta', 'postmeta', $data);
  $data = str_replace('wp:meta_key', 'meta_key', $data);
  $data = str_replace('wp:meta_value', 'meta_value', $data);
  $data = str_replace('wp:post_type', 'post_type', $data);
  $data = str_replace('wp:attachment_url', 'attachment_url', $data);
  
  $data = str_replace('wp:meta_value', 'meta_value', $data);
  $xml = simplexml_load_string($data, 'SimpleXMLElement', LIBXML_COMPACT | LIBXML_PARSEHUGE);
  //$json = json_encode($xml);
  //$array = json_decode($json,TRUE);

  $fields = array('title', 'link', 'post_id', 'post_date', 'creator', 'guid', 'content');

  // get attachments
  
  foreach ($xml->channel->item as $key=>$val) {
    
    if ((string)$val->post_type !== 'attachment') {
      continue;
    }
    $post_id = (int)$val->post_id;
    //dpm('POSTID' . $post_id);
    $attachments[$post_id] = (string)$val->attachment_url;
  }

  // get glossary 
  $glossary = [];
  foreach ($xml->channel->item as $key=>$val) {
    
    if ((string)$val->post_type !== 'glossary') {
      continue;
    }
    $name = (string)$val->title;
    $content = (string)$val->content;
    //dpm('POSTID' . $post_id);
    $glossary[] = array(
      'name' => $name,
      'description' => $content,
    );
  }

  // get posts
  $nodes = [];
  $c = 0;
  foreach ($xml->channel->item as $key=>$val) {

    if ((string)$val->post_type !== 'post') {
      continue;
    }

    $c++;

    $post_id = (int)$val->post_id;
    if (!empty($posts)) { 
      if (!in_array($post_id, $posts)) {
        continue;
      } 
    } else {
      if ($c > 50) {
        //break 1;
      }
    }

    $node = [];
    foreach ($fields as $field) {
      $node[$field] = ((string)$val->{$field});
    }

    //find gallery
    $pattern = '/\[gallery.*?ids="(.*?)"\]/ms';
    preg_match_all($pattern, ((string)$val->content), $gallery);

    if (!empty($gallery[1])) {
      $gal_images = explode(',', $gallery[1][0]);
      foreach ($gal_images as $img_id) {
        $images[] = $attachments[$img_id];
      }

      $node['gallery'] = $images;
    }

    
    // taxonomy
    $tags = [];
    foreach ($val->category as $key=>$cat) {
      $type = (string)$cat['domain'];
      if ($type == 'post_tag') {
        $tags[] = (string)$cat;
      }
      if ($type == 'category') {
        $category = (string)$cat;
      }
    }
    $node['tags'] = $tags;
    $node['category'] = $category;




    $key = '';
    $glossary_parser = TRUE;
    foreach ($val->postmeta as $postmeta) {
      foreach ($postmeta as $item) {
        if ($key == '') {
          $key = (string)$item;
        } else {
          $value = (string)$item;
          if ($key == '_aioseop_opengraph_settings') {
           
            $meta = _mb_unserialize($value);
            if ($meta == null) {
              dpm($value);
            }
          }
          if ($key == '_glossary_disable_for_page') {
            if ($value == 1) {
              $glossary_parser = FALSE;
            }
          }

          $key = '';
        }
      }
    }

    $node['glossary_parser'] = $glossary_parser;

    if ($meta) {
      if (isset($meta['aioseop_opengraph_settings_image'])) {
        $node['main_image'] = $meta['aioseop_opengraph_settings_image'];
        //$node['main_image'] = 'http://www.kerekerdokert.hu/css/kerttervezes_u.png';

      }

      if (isset($meta['aioseop_opengraph_settings_desc'])) {
        $node['meta_desc'] = $meta['aioseop_opengraph_settings_desc'];
      }
    }

    $node['content'] = substr($node['content'], 0, strrpos($node['content'], '[mc4wp_form'));

    $nodes[] = $node;

  }

  return array(
    'articles' => $nodes,
    'glossary' => $glossary,
  );
}

function migrate_wp_export_users() {
  global $authors;

  $data = file_get_contents(drupal_get_path('module', 'migrate_wp') . '/source/wp25.xml');
  $pattern = '/<wp:author_login>(.*?)<\/wp:author_login>.*?<wp:author_email>(.*?)<\/wp:author_email>.*?<wp:author_first_name><!\[CDATA\[(.*?)\]\]><\/wp:author_first_name>.*?<wp:author_last_name><!\[CDATA\[(.*?)\]\]><\/wp:author_last_name>/ms';
  preg_match_all($pattern, $data, $user_data);


  $authors = [];
  for ($c = 0; $c < count($user_data[1]); $c++) {
    $authors[$user_data[1][$c]] = array(
      'email' => $user_data[2][$c],
      'name' => $user_data[4][$c] . ' ' . $user_data[3][$c],
    ); 

    //---
    $author = taxonomy_get_term_by_name($user_data[4][$c] . ' ' . $user_data[3][$c]);

    if (!empty($author)) {
      $author = reset($author);

    } else {
      $author = new stdClass();
      $author->name = $user_data[4][$c] . ' ' . $user_data[3][$c];
      $vocabulary = taxonomy_vocabulary_machine_name_load('published');
      $author->vid = $vocabulary->vid;
      taxonomy_term_save($author);

    }
  }


  



}

function migrate_wp_find_glossary($text) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('glossary');
  $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));

  foreach ($terms as $term) {
    $search = "/\b(" . str_replace('/', "\/", $term->name) . ")\b/iu";
    $replace = '<a href="/taxonomy/term/' . $term->tid . '" title="' . $term->description . '" class="glossary">$1</a>';
    $text = preg_replace($search , $replace,  $text);

  }


  
  
  


  return $text;
}


function migrate_wp_form_generate_list_submit($form, &$form_state) {
  global $sources;

  $nodes = [];
  foreach ($sources as $source) {
    $import = xml2node($source);
    $nodes = array_merge($nodes, $import['articles']);
  }


  $fp = fopen(drupal_get_path('module', 'migrate_wp') . '/list/list.csv', 'w');
  fprintf($fp, "\xEF\xBB\xBF");
  $c = 0;
  foreach ($nodes as $node) {
    $c++;
    fputcsv($fp, array(
      (string)$c,
      $node['post_date'],
      $node['title'],
      $node['category'],
      "=HYPERLINK(\"".$node['link']."\")",
    ));
  }
  fclose($fp);
  


}

function _mb_unserialize($string) {
    $string2 = preg_replace_callback(
        '!s:(\d+):"(.*?)";!s',
        function($m){
            $len = strlen($m[2]);
            $result = "s:$len:\"{$m[2]}\";";
            return $result;

        },
        $string);
    return unserialize($string2);
}  