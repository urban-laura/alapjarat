<?php
/*
function alapjarat_preprocess_page(&$vars){
 $path = $_GET['q'];

  if (strpos($path,'archive') !== false) {
    drupal_set_title('Alapjárat');
  }
}


function alapjarat_common_preprocess_html(&$vars) {
	$vars['head_title'] = implode(' | ', array(drupal_set_title('Alapjárat')));
}
*/

// Hidden
function alapjarat_common_form_alter(&$form, &$form_state, $form_id) {
	if($form_id == 'search_block_form') {
		hide($form['actions']['submit']);
	}
	
	if($form['#id'] == 'views-exposed-form-search-page-page') {
		hide($form['submit']);
	}

	if($form['#id'] == 'views-exposed-form-search-page-page') {
		hide($form['submit']);
	}

	if($form['#id'] == 'a-article-node-form') {
		hide($form['field_hiden_select']);
		hide($form['options']['promote']);
		hide($form['options']['sticky']);
		if (!empty($form['field_wp_post_id']['und'][0]['value']['#default_value'])) {
		  $text = $form['field_text']['und'][0]['#default_value'];
		  $form['field_text']['und'][0]['#default_value'] = alapjarat_common_autop($text);
	    }
	}

}


//Archive
function alapjarat_common_ctools_plugin_directory($owner, $plugin_type) {
	if ($owner == 'ctools' && $plugin_type == 'content_types') {
		return 'plugins/content_types';
	}
}

function alapjarat_common_article_archives_menu() {
	$dateformat = 'Y. F';

	$output = '<ul>';

	$start = date($dateformat);
	$start_y = date('Y. ');
	$start_m = date('F');

	$archive = date('Ym', strtotime($start));
	$end = date($dateformat, strtotime('2016 October'));
	
	$output .= '<li>' . l($start_y . t($start_m), 'archive/' . $archive) . '</li>';

	$prev_month = date($dateformat, strtotime('-1 month', strtotime($start)));
	$prev_y = date('Y. ', strtotime($prev_month));
	$prev_m = date('F', strtotime($prev_month));


	$c = 0;
	while ($end !== date($dateformat, strtotime('+1 month', strtotime($prev_month)))) {
		$archive = date('Ym', strtotime($prev_month));
		$prev_y = date('Y. ', strtotime($prev_month));
		$prev_m = date('F', strtotime($prev_month));

		$output .= '<li>' . l($prev_y . t($prev_m), 'archive/' . $archive) . '</li>';
		$prev_month = date($dateformat, strtotime('-1 month', strtotime($prev_month)));
		$c++;
	}
	$output .= '<ul>';


	return $output;
}

//Article
function alapjarat_common_node_presave($node) {
	if ($node->type == 'a_article' && isset($node->field_title2['und'])) {
		$node->title = strip_tags($node->field_title2['und'][0]['value']);
	}

	if ($node->type == 'a_article' && !is_null($node->publish_on)) {
		$node->sketch = 0;
		$node->scheduled = 1;
	}

	if ($node->type == 'a_article' && $node->status == 1) {
		$node->sketch = 0;
		$node->scheduled = 0;
		$node->field_hiden_select['und'][0]['value'] = 0;
	}

	if ($node->type == 'a_article' && $node->sketch == 1) {
		$node->field_hiden_select['und'][0]['value'] = 1;
	}


	if ($node->type == 'a_article' && $node->scheduled == 1) {
		$node->field_hiden_select['und'][0]['value'] = 2;
	}

}

function alapjarat_common_most_popular_terms() {
	$query = db_select('field_data_field_tagsa', 't')
	->fields('t', array('field_tagsa_tid'))
	->groupBy('t.field_tagsa_tid')
	->orderBy('tc', 'DESC')
	->range(0,5);
	$query->addExpression('COUNT(t.field_tagsa_tid)', 'tc');

	$results = $query->execute();

	$items = [];
	foreach ($results as $row) {
		$term = taxonomy_term_load($row->field_tagsa_tid);
		$items[] = l('#' . $term->name, drupal_get_path_alias('taxonomy/term/' . $term->tid));
	}

	$variables = array('items' => $items);

	return theme('item_list', array('items'=>$items));
}

function alapjarat_common_node_prepare($node) {
  if (!empty($node->field_wp_post_id)) {
    //$text = $node->field_text[LANGUAGE_NONE][0]['safe_value'];
    //$text = _alapjarat_common_nl2p($text);
    //$node->field_text[LANGUAGE_NONE][0]['value'] = $text;
  }
}

function _alapjarat_common_nl2p($string) {

  $lines = explode("\n\n", $string);
  if (count($lines) > 1) {
    $paragraphs = '';
    foreach ($lines as $line) {
      if (trim($line)) {
	    $paragraphs .= '<p>' . $line . '</p>';
	  }
    }

    return $paragraphs;
  }

  return $string;
}
function wp_html_split( $input ) {
    return preg_split( get_html_split_regex(), $input, -1, PREG_SPLIT_DELIM_CAPTURE );
}

function get_html_split_regex() {
    static $regex;

    if ( ! isset( $regex ) ) {
        $comments =
              '!'           // Start of comment, after the <.
            . '(?:'         // Unroll the loop: Consume everything until --> is found.
            .     '-(?!->)' // Dash not followed by end of comment.
            .     '[^\-]*+' // Consume non-dashes.
            . ')*+'         // Loop possessively.
            . '(?:-->)?';   // End of comment. If not found, match all input.

        $cdata =
              '!\[CDATA\['  // Start of comment, after the <.
            . '[^\]]*+'     // Consume non-].
            . '(?:'         // Unroll the loop: Consume everything until ]]> is found.
            .     '](?!]>)' // One ] not followed by end of comment.
            .     '[^\]]*+' // Consume non-].
            . ')*+'         // Loop possessively.
            . '(?:]]>)?';   // End of comment. If not found, match all input.

        $escaped =
              '(?='           // Is the element escaped?
            .    '!--'
            . '|'
            .    '!\[CDATA\['
            . ')'
            . '(?(?=!-)'      // If yes, which type?
            .     $comments
            . '|'
            .     $cdata
            . ')';

        $regex =
              '/('              // Capture the entire match.
            .     '<'           // Find start of element.
            .     '(?'          // Conditional expression follows.
            .         $escaped  // Find end of escaped element.
            .     '|'           // ... else ...
            .         '[^>]*>?' // Find end of normal element.
            .     ')'
            . ')/';
    }

    return $regex;
}

function wp_replace_in_html_tags( $haystack, $replace_pairs ) {
    // Find all elements.
    $textarr = wp_html_split( $haystack );
    $changed = false;

    if ( 1 === count( $replace_pairs ) ) {
        foreach ( $replace_pairs as $needle => $replace );
        for ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {
            if ( false !== strpos( $textarr[$i], $needle ) ) {
                $textarr[$i] = str_replace( $needle, $replace, $textarr[$i] );
                $changed = true;
            }
        }
    } else {
        $needles = array_keys( $replace_pairs );
        for ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {
            foreach ( $needles as $needle ) {
                if ( false !== strpos( $textarr[$i], $needle ) ) {
                    $textarr[$i] = strtr( $textarr[$i], $replace_pairs );
                    $changed = true;
                    break;
                }
            }
        }
    }

    if ( $changed ) {
        $haystack = implode( $textarr );
    }

    return $haystack;
}

function alapjarat_common_autop($pee, $br = true ) {
    $pre_tags = array();

    if ( trim($pee) === '' )
        return '';

    $pee = $pee . "\n";
    if ( strpos($pee, '<pre') !== false ) {
        $pee_parts = explode( '</pre>', $pee );
        $last_pee = array_pop($pee_parts);
        $pee = '';
        $i = 0;
        foreach ( $pee_parts as $pee_part ) {
            $start = strpos($pee_part, '<pre');
            if ( $start === false ) {
                $pee .= $pee_part;
                continue;
            }
            $name = "<pre wp-pre-tag-$i></pre>";
            $pre_tags[$name] = substr( $pee_part, $start ) . '</pre>';
            $pee .= substr( $pee_part, 0, $start ) . $name;
            $i++;
        }

        $pee .= $last_pee;
    }

    $pee = preg_replace('|<br\s*/?>\s*<br\s*/?>|', "\n\n", $pee);

    $allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';

    $pee = preg_replace('!(<' . $allblocks . '[\s/>])!', "\n\n$1", $pee);
    $pee = preg_replace('!(</' . $allblocks . '>)!', "$1\n\n", $pee);
    $pee = str_replace(array("\r\n", "\r"), "\n", $pee);
    $pee = wp_replace_in_html_tags( $pee, array( "\n" => " <!-- wpnl --> " ) );

    if ( strpos( $pee, '<option' ) !== false ) {
        $pee = preg_replace( '|\s*<option|', '<option', $pee );
        $pee = preg_replace( '|</option>\s*|', '</option>', $pee );
    }

    if ( strpos( $pee, '</object>' ) !== false ) {
        $pee = preg_replace( '|(<object[^>]*>)\s*|', '$1', $pee );
        $pee = preg_replace( '|\s*</object>|', '</object>', $pee );
        $pee = preg_replace( '%\s*(</?(?:param|embed)[^>]*>)\s*%', '$1', $pee );
    }

    if ( strpos( $pee, '<source' ) !== false || strpos( $pee, '<track' ) !== false ) {
        $pee = preg_replace( '%([<\[](?:audio|video)[^>\]]*[>\]])\s*%', '$1', $pee );
        $pee = preg_replace( '%\s*([<\[]/(?:audio|video)[>\]])%', '$1', $pee );
        $pee = preg_replace( '%\s*(<(?:source|track)[^>]*>)\s*%', '$1', $pee );
    }

    if ( strpos( $pee, '<figcaption' ) !== false ) {
        $pee = preg_replace( '|\s*(<figcaption[^>]*>)|', '$1', $pee );
        $pee = preg_replace( '|</figcaption>\s*|', '</figcaption>', $pee );
    }

    $pee = preg_replace("/\n\n+/", "\n\n", $pee);
    $pees = preg_split('/\n\s*\n/', $pee, -1, PREG_SPLIT_NO_EMPTY);

    $pee = '';
    foreach ( $pees as $tinkle ) {
        $pee .= '<p>' . trim($tinkle, "\n") . "</p>\n";
    }

    $pee = preg_replace('|<p>\s*</p>|', '', $pee);
    $pee = preg_replace('!<p>([^<]+)</(div|address|form)>!', "<p>$1</p></$2>", $pee);
    $pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee);
    $pee = preg_replace("|<p>(<li.+?)</p>|", "$1", $pee);
    $pee = preg_replace('|<p><blockquote([^>]*)>|i', "<blockquote$1><p>", $pee);
    $pee = str_replace('</blockquote></p>', '</p></blockquote>', $pee);
    $pee = preg_replace('!<p>\s*(</?' . $allblocks . '[^>]*>)!', "$1", $pee);
    $pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*</p>!', "$1", $pee);

    if ( $br ) {
        $pee = preg_replace_callback('/<(script|style).*?<\/\\1>/s', '_autop_newline_preservation_helper', $pee);
        $pee = str_replace( array( '<br>', '<br/>' ), '<br />', $pee );
        $pee = preg_replace('|(?<!<br />)\s*\n|', "<br />\n", $pee);
        $pee = str_replace('<WPPreserveNewline />', "\n", $pee);
    }

    $pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\s*<br />!', "$1", $pee);

    $pee = preg_replace('!<br />(\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee);
    $pee = preg_replace( "|\n</p>$|", '</p>', $pee );

    if ( !empty($pre_tags) )
        $pee = str_replace(array_keys($pre_tags), array_values($pre_tags), $pee);

    if ( false !== strpos( $pee, '<!-- wpnl -->' ) ) {
        $pee = str_replace( array( ' <!-- wpnl --> ', '<!-- wpnl -->' ), "\n", $pee );
    }

    return $pee;

}

function alapjarat_common_find_glossary($text, $node = null) {

  if (is_null($node) || $node->field_glossary_parser[LANGUAGE_NONE][0]['value'] == 1) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('glossary');
    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));

    foreach ($terms as $term) {
      $pattern = "/(?!<.*?)(\b" . str_replace('/', "\/", $term->name) . "\b)(?![^<>]*?>)/iu";
      $alias = drupal_get_path_alias('taxonomy/term/' . $term->tid);
      $replace = '<a href="/' . $alias . '" title="' . $term->description . '" class="glossary">$1</a>';
      $text = preg_replace($pattern , $replace,  $text);
    }
  }

  $pattern = "/www.alapjarat.hu\/wp-content\/uploads/iu";
  $replace = "www.alapjarat.hu/sites/default/files/wp-content/uploads";
  $text = preg_replace($pattern , $replace,  $text);

  return $text;
}

function alapjarat_common_embed_youtube($text) {

  $pattern = "/\[embed\]<a href=\"https:\/\/www\.youtube\.com\/watch\?.*?v=(.*?)\[.*?>https:\/\/www\.youtube\.com.*?<\/a>/iu";
  $replace = "<iframe src=\"https://www.youtube.com/embed/$1\" width=\"800\" height=\"450\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>";
  $text = preg_replace($pattern, $replace,  $text);

  $pattern = "/\[embed\]<a href=\"https:\/\/www\.youtube\.com\/watch\?v=(.*?)\[.*?>https:\/\/www\.youtube\.com.*?<\/a>/iu";
  $replace = "<iframe src=\"https://www.youtube.com/embed/$1\" width=\"800\" height=\"450\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>";
  $text = preg_replace($pattern, $replace,  $text);

  $pattern = "/<a href=\"https:\/\/www\.youtube\.com\/watch\?v=(.*?)\".*?>https:\/\/www\.youtube\.com.*?<\/a>/iu";
  $replace = "<iframe src=\"https://www.youtube.com/embed/$1\" width=\"800\" height=\"450\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>";
  $text = preg_replace($pattern, $replace,  $text);

  $pattern = "/\[embed\]<a href=\"https:\/\/youtu\.be\/(.*?)\[\/embed\].*?<\/a>/iu";
  $replace = "<iframe src=\"https://www.youtube.com/embed/$1\" width=\"800\" height=\"450\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>";
  $text = preg_replace($pattern, $replace,  $text);

  //$text = preg_replace("/<p>\s+<\/p>\n/ui", "", $text);


  return $text;
}

function alapjarat_common_embed_fb_videos($text) {
  $search = "/<a href=\"https:\/\/www\.facebook.*?(https:\/\/www\.facebook\.com\/.*?\/videos\/.*?)\/.*?<\/a>/iu";
  $replace = "<iframe src=\"https://www.facebook.com/plugins/video.php?href=$1&show_text=0&width=560\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowTransparency=\"true\" allowFullScreen=\"true\" width=\"560\" height=\"615\"></iframe>";
  $text = preg_replace($search , $replace,  $text);

  return $text;
}
