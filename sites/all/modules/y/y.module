<?php

// include field management functionality
require_once 'y.fieldmgt.inc';

// include entity management functionality
require_once 'y.entitymgt.inc';

// include YAML callback functions
require_once 'y.yamlcallables.inc';

// include YAML display and query and page functionality
require_once 'y.displaymgt.inc';

/**
 * Implements hook_y()
 * @return array
 */
function y_y() {
  return array('layout', 'theme', 'admin');
}

/**
 * Implements hook_theme().
 */
function y_theme($existing, $type, $theme, $path) {
  $ret = y__protocol_get_all(array(
    'layout',
    'theme'
  ), 'theme', 'y'); // returns hook_theme info for all theme definitions
  return $ret;
}

/** Array flattening / unflattening ************************/

/**
 * Flatten an array to one-dimensional with keys imploded with delimiter
 * @param array $array // array to be flattened
 * @param string $prefix // current prefix for key
 * @param string $delim // glue delimiter for key
 * @param null $ret // array to put result in
 * @return array|null    // returns current level of array
 */
function y__array_flatten(array $array, $prefix = '', $delim = ':', &$ret = NULL) {
  if ($ret === NULL) {
    $ret = array();
  }
  foreach ($array as $key => $value) {
    if (is_array($value) && $value) {
      y__array_flatten($value, $prefix . $key . $delim, $delim, $ret);
    }
    else {
      $ret[$prefix . $key] = $value;
    }
  }
  return ($ret);
}

/**
 * Unflatten 1D array into multi-dimensional
 * @param $prefix
 * @param $array / one-dimensional
 * @param string $glue
 */
function y__array_unflatten(array $array, $delim = ':') {
  $ret = array();
  foreach ($array as $key => $value) {
    $workret = &$ret;
    $deepkeys = explode($delim, $key);
    $finalkey = array_shift($deepkeys);
    foreach ($deepkeys as $curkey) {
      if (!isset($workret[$finalkey])) {
        $workret[$finalkey] = array();
      }
      $workret = &$workret[$finalkey];
      $finalkey = $curkey;
    }
    $workret[$finalkey] = $value;
  }
  return $ret;
}

/** Main YAML retrieval ************************************/

/**
 * Register a directory to load extra Y config information (not in default set of installed modules)
 * Can be in a theme, library, or for hook_schema a recently uninstalled module
 * @param array $extraconfiginfo
 */
function y__register_extra_config(array $extraconfiginfo) {
  $override = &drupal_static('y__extra_config', array());
  foreach ($extraconfiginfo as $name => $configinfo) {
    if (!isset($override[$name])) {
      $override[$name] = $configinfo + array(
          'protocols implemented' => array(),
          'path' => '.'
        );
      $override[$name]['path'] = rtrim($override[$name]['path'], "/\\") . '/';
    }
  }
}

/**
 * Fetch all of the information defined by the owning module according to the protocol
 * This is the meat of it all
 * @param null $owner
 * @param $protocol
 * @return array of protocol information keyed by module implementing protocol
 */
function y__info($protocol, $owner = NULL, $format = 'tree') {
  $modulesimplement = &drupal_static(__FUNCTION__ . ':modulesimplement', NULL);
  // An array keyed by protocol of the modules implementing the protocol
  // Eg. $modulesimplement['hook'] = array( 'bc', 'bcfeeds' )

  $protocolsimplemented = &drupal_static(__FUNCTION__ . ':protocolsimplemented', array());
  // An array keyed by modulename of the protocols implemented by the module
  // Eg. $protocolsimplemented['bc'] = array( 'hook', 'entity', 'bctype' );

  $newinfo = FALSE; // semaphore to know when yinfo has new information to be cached.
  $yinfo = &drupal_static(__FUNCTION__, array());
  // A multi-dim array of the modules implementing protocols keyed by protocol and module
  // Eg. $yinfo[$protocol][$module] = array(... )
  $configinfo = &drupal_static('y__extra_config', array());
  if ($modulesimplement === NULL) {
    foreach (module_implements('y') as $module) {
      if (!($path = drupal_get_path('module', $module))) {
        $path = '.';
      }
      $configinfo[$module] = array(
        'protocols implemented' => module_invoke($module, 'y'),
        'path' => $path . '/'
      );
    }
  }
  foreach ($configinfo as $module => $info) {
    $protocols = $info['protocols implemented'];
    $protocolsimplemented[$module] = $protocols;
    foreach ($protocols as $p) {
      if (isset($modulesimplement[$p])) {
        if (!in_array($module, $modulesimplement[$p])) {
          $modulesimplement[$p][] = $module;
        }
      }
      else {
        $modulesimplement[$p] = array($module);
      }
    }
  }
  if ($owner) {
    if (!isset($protocolsimplemented[$owner])) {
      return array(); // fail quietly -- this happens when hook_schema() tries to find Y after uninstall -- must be overriden
      /*$warning = t('Protocol !protocol requested  of module !module that provides none.', array(
        '!protocol' => $protocol,
        '!module' => $owner
      )); // uncomment to fail noisily */
    }
    else {
      if (!in_array($protocol, $protocolsimplemented[$owner])) {
        $warning = t('Protocol !protocol requested  of module !module that does not support it.', array(
          '!protocol' => $protocol,
          '!module' => $owner
        ));
      }
    }
  }
  if (!isset($modulesimplement[$protocol])) {
    return array();
  }
  if (isset($warning)) {
    watchdog('Y', $warning);
    drupal_set_message('Y: ' . $warning, 'error');
    return array();
  }
  $modules = $owner ? array($owner) : $modulesimplement[$protocol];
  if (!$modules) {
    return (array());
  }

  $y_cache_flag = variable_get('y_cache_flag', TRUE);
  if (!$yinfo) {
    if ($y_cache_flag && ($cache = cache_get(__FUNCTION__))) {
      $yinfo = $cache->data;
    }
  }

  if ($owner && isset($yinfo[$protocol][$owner])) {
    return $format ? $yinfo[$protocol][$owner][$format] : $yinfo[$protocol][$owner];
  }

  foreach ($modules as $module) {
    $callbacks = array(
      '!t' => 'y__yaml_callable_t',
      '!module' => 'y__yaml_callable_plugin_module',
      '!path' => 'y__yaml_callable_plugin_path', // path to YAML / plugin from Drupal root
      '!relativepath' => 'y__yaml_callable_plugin_relativepath', // path to YAML / plugin from module root
      '!name' => 'y__yaml_callable_plugin_name',
      '!local' => 'y__yaml_callable_plugin_local',
      '!call' => 'y__yaml_callable_call_user_func_array',
      '!var' => 'y__yaml_callable_var',
      '!setplugin' => 'y__yaml_callable_plugin_set',
      '!menucallback' => 'y__yaml_callable_plugin_menucallback',
      '!callback' => 'y__yaml_callable_plugin_callback',
      '!protocol' => 'y__yaml_callable_plugin_protocol',
      '!modulepath' => 'y__yaml_callable_plugin_modulepath', // path to module from Drupal root
      '!eval' => 'y__yaml_callable_eval',
    );
    // get config path for the module
    if (!isset($yinfo['_config'][$module])) {
      $modulepath = $configinfo[$module]['path'];
      foreach (array(
                 $modulepath => $module . '.yaml',
                 $modulepath . 'config/' => '_config.yaml'
               ) as $path => $filename) {
        if (file_exists($path . $filename)) {
          $filebase = pathinfo($filename, PATHINFO_FILENAME);
          _y__stack_push('y__yaml_plugin_values',
            array(
              'path' => $path,
              'module' => $module,
              'modulepath' => $configinfo[$module]['path'],
              'protocol' => '_config',
              'file' => $filebase . 'inc',
              'uri' => $path . $filebase . '.inc',
              'name' => $filebase,
              // 'bctype'
              'yaml uri' => $path . $filename,
              // 'sites/all/modules/enterprise/bc/config/entity/bctype.yaml'
              'filename' => $filename
              // 'bctype.yaml'
            ));
          if ((($_config = yaml_parse($path . $filename, 0, $n, $callbacks)) !== FALSE)) {
            if (!isset($_config['path'])) {
              $_config['path'] = $path;
              $_config['filename'] = $filename;
            }
            _y__stack_pop('y__yaml_plugin_values');
            break;
          }
          _y__stack_pop('y__yaml_plugin_values');
        }
      }
      $yinfo['_config'][$module] = $_config ?? array('path' => $path);
      $newinfo = TRUE;
    }
    if (!isset($yinfo[$protocol][$module])) {
      $conf = $yinfo['_config'][$module];
      $initarray = isset($yinfo['_config'][$module][$protocol]) ? $yinfo['_config'][$module][$protocol] : array();
      $filename = $conf['path'] . $protocol . '.yaml';
      // todo: find callbacks yaml and callbacks PHP if they will be found
      if (file_exists($filename)) {
        _y__stack_push('y__yaml_plugin_values',
          array(
            'path' => $conf['path'],
            'module' => $module,
            'modulepath' => $configinfo[$module]['path'],
            'protocol' => $protocol,
            'file' => $protocol . '.inc',
            'uri' => $conf['path'] . $protocol . '.inc',
            'name' => $protocol,
            // 'bctype'
            'yaml uri' => $filename,
            // 'sites/all/modules/enterprise/bc/config/entity/bctype.yaml'
            'filename' => $protocol . '.yaml'
            // 'bctype.yaml'
          ));
        // $protocolinfo = (($info = yaml_parse_file($filename, 0, $n, $callbacks)) !== FALSE ? $info : $initarray);
        if (($info = yaml_parse_file($filename, 0, $n, $callbacks)) !== FALSE) {
          $protocolinfo = $info;
        }
        else {
          $protocolinfo = $initarray;
          drupal_set_message('Y ' . __FUNCTION__ . '(' . __LINE__ . ') error parsing ' . $filename, 'warning');
        }
        _y__stack_pop('y__yaml_plugin_values');
      }
      else {
        $protocolinfo = $initarray;
      }
      $yinfo[$protocol][$module] = $protocolinfo
        ? array(
          'tree' => $protocolinfo,
          'flat' => y__array_flatten($protocolinfo)
        )
        : array('tree' => array(), 'flat' => array());
      $newinfo = TRUE;

      foreach (file_scan_directory($conf['path'] . $protocol, '|.*\.y.?ml|') as $file) {
        if ($path = dirname($file->uri)) {
          $path .= '/';
        }
        _y__stack_push('y__yaml_plugin_values',
          array(
            'path' => $path,
            'module' => $module,
            'modulepath' => $configinfo[$module]['path'],
            'protocol' => $protocol,
            'file' => $file->name . '.inc',
            'uri' => $path . $file->name . '.inc',
            'name' => $file->name,
            // 'bctype'
            'yaml uri' => $file->uri,
            // 'sites/all/modules/enterprise/bc/config/entity/bctype.yaml'
            'filename' => $file->filename
            // 'bctype.yaml'
          ));
        if (($info = yaml_parse_file($file->uri, 0, $n, $callbacks)) !== FALSE) {
          $newinfo = TRUE;
          $yinfo[$protocol][$module] = array(
            'tree' => array_merge($yinfo[$protocol][$module]['tree'], $info),
            'flat' => array_merge($yinfo[$protocol][$module]['flat'], y__array_flatten($info))
          );
        }
        else {
          drupal_set_message('Y ' . __FUNCTION__ . '(' . __LINE__ . ') error parsing ' . $file->uri, 'warning');
        }
        _y__stack_pop('y__yaml_plugin_values');
      }
    }
  }
  if ($newinfo) {
    drupal_alter('yinfo', $yinfo);
    if ($y_cache_flag) {
      cache_set(__FUNCTION__, $yinfo);
    }
  }
  if ($owner) {
    return isset($yinfo[$protocol][$owner][$format]) ? $yinfo[$protocol][$owner][$format] : array();
  }
  else {
    $ret = array();
    foreach ($yinfo[$protocol] as $name => $info) {
      $ret = array_merge($ret, $info[$format]);
    }
    return $ret;
  }
}

/** YAML build functions ***********************************/

/**
 * Build config array from patterns
 * @param $module the module defining the configuration
 * @param $protocol the protocol defined
 * @param $patterns the patterns to match
 * @param null & $ret merge results into this array if passed in
 * @return array resulting array
 */
function y__build_pattern($protocol, $module, $patterns, &$info = NULL) {
  $yinfo = y__info($protocol, $module, 'flat');
  $buildflat = array();
  foreach ($patterns as $pattern => $filter) {
    if (!is_array($filter)) { // this is a simple pattern
      $pattern = '|^' . strtr($pattern, array('*' => '([^:]*?)')) . '(.*)|';
      $mainpattern = $pattern;
      $mainreplacement = $filter;
    }
    else { // this is pure regex and all patterns and replacements are regex-perfect
      $mainpattern = array_keys($filter);
      $mainreplacement = array_values($filter);
    }
    $matchingkeys = preg_grep($pattern, array_keys($yinfo));
    $replacementkeys = preg_replace($mainpattern, $mainreplacement, $matchingkeys);
    foreach ($matchingkeys as $index => $key) {
      $buildflat[$replacementkeys[$index]] = $yinfo[$key];
    }
  }
  $buildflat = y__array_unflatten($buildflat);
  if ($info === NULL) {
    return $buildflat;
  }
  $info = array_merge($info, $buildflat);
  return $info;
}

/**
 * Build branch array to root from pattern
 * @param $module the module defining the configuration
 * @param $protocol the protocol defined
 * @param $pattern the pattern to match
 * @param null & $ret merge results into this array if passed in
 * @return array resulting array
 */
function y__build_branch($module, $protocol, $pattern, &$info = NULL) {
  $branchsearched = array();
  $yinfo = y__info($protocol, $module, 'flat');
  $buildflat = array();
  $childpattern = '|^' . strtr($pattern, array('*' => '([^:]*?)')) . '(.*)|';
  $matchingkeys = preg_grep($childpattern, array_keys($yinfo));
  foreach ($matchingkeys as $key) {
    $buildflat[$key] = $yinfo[$key];
    if (($colpos = strrpos($key, ':')) !== FALSE) {
      $key = substr($key, 0, $colpos);
      if (empty($branchsearched[$key])) {
        $branchsearched[$key] = TRUE;
        while (($colpos = strrpos($key, ':')) !== FALSE) {
          $key = substr($key, 0, $colpos);
          $parentpattern = '|^' . $key . ':([^:]*?)$|';
          $parentkeys = preg_grep($parentpattern, array_keys($yinfo));
          foreach ($parentkeys as $parentkey) {
            if (!isset($buildflat[$parentkey])) {
              $buildflat[$parentkey] = $yinfo[$parentkey];
            }
            else {
              $key = '';
              break;
            }
          }
        }
      }
    }
  }
  $buildflat = y__array_unflatten($buildflat);
  if ($info === NULL) {
    return $buildflat;
  }
  $info = array_merge($info, $buildflat);
  return $info;
}

/** Packaged YAML protocol controllers *********************/

/**
 * Iterate through a set of protocols and get an array of all the api information in them.
 * @param array $protocols
 * @param $api
 * @param $module
 * @param squishiness - this dissolves the upper levels of the array structure (idea is to eliminate top indexes and union the sub-arrays together)
 * @return array
 */
function y__protocol_get_all($protocols, $api, $module, $squishiness = 0) {
  if (!is_array($protocols)) {
    $protocols = array($protocols);
  }
  $ret = array();
  foreach ($protocols as $protocol) {
    $yinfo = y__protocol($protocol, $api, $module);
    $ret += $yinfo;
  }
  if ($squishiness) { // squishiness does a quick union of subarrays
    if ($squishiness > 0) {
      while ($squishiness--) {
        foreach ($ret as $key => $value) {
          if (is_array($value)) {
            unset($ret[$key]);
            $ret += $value;
          }
        }
      }
    }
  }
  return $ret;
}

/**
 * Main y controller router
 * @param $protocol
 * @param ... more parameters
 * @return array of protocol information supplied by controller
 */
function y__protocol(string $protocol, string $api, $module = NULL, array &$info = NULL) {
  static $addonprotocolsfetched = FALSE;
  static $protocoldef = array(
    'instance' => array(),
    'field' => array(),
    'protocol' => array(),
    'entity' => array(
      'schema' => array(
        'pattern' => array(
          "*:schema:" => '$1:$2',
          "*:description" => '$1:description',
          "*:properties:*:schema:" => '$1:fields:$2:$3',
        )
      ),
      'property info' => array(
        'pattern' => array(
          "*:properties:*:info:" => '$1:properties:$2:$3'
        )
      ),
      'extra fields' => array(
        'pattern' => array(
          "*:properties:*:extra:" => '$1:$2:$3'
        )
      ),
    ),
    'admin' => array(),
    'layout' => array(),
    'theme' => array(),
  );
  if (!isset($info)) {
    $info = array();
  }
  if (!isset($protocoldef[$protocol])) {
    if (!$addonprotocolsfetched) {
      $protocoldef += y__info('protocol');
      $addonprotocolsfetched = TRUE;
    }
    if (!isset($protocoldef[$protocol])) { // if still not set after retrieving protocols, set an empty stub
      $protocoldef[$protocol] = array();
    }
  }
  $protocol_instructions = $protocoldef[$protocol][$api] ?? ($protocoldef[$protocol]['default'] ?? array('array' => '+'));
  foreach ($protocol_instructions as $buildtype => $patterns) {
    switch ($buildtype) {
      case 'pattern':
        y__build_pattern($protocol, $module, $patterns, $info);
        break;
      case 'array':
      default:
        $yinfo = $yinfo ?? y__info($protocol, $module);
        foreach ($yinfo as $key => $apiinfo) {
          if (isset($apiinfo[$api])) {
            $info[$key] = $info[$key] ?? array();
            switch ($patterns) {
              case '+':
                $info[$key] += $apiinfo[$api];
                break;
              case 'merge':
                $info[$key] = array_merge($info[$key], $apiinfo[$api]);
                break;
              default:
                if (function_exists($patterns)) {
                  $info[$key] = call_user_func($patterns, $info[$key], $apiinfo[$api]);
                }
                break;
            }
          }
        }
        break;
    }
  }
  return $info;
}

/** Function does nothing and can be passed as default to y__plugin so result is guaranteed to be callable */
function _y__donothing() {
  return;
}

/**
 * Plugin functionality
 * if '_y__donothing' passed as default, then it always returns a valid callable function name
 * callback is of form:
 *   callbackname: name_of_function OR
 *   callbackname:
 *     function: name_of_function
 *     uri: file_containing_function_definition
 * @param $info an array of configuration information (eg. all the form information associated with an entity)
 * @param $type a selector into that array (eg. the bundle name using a form) (use NULL if $info has the callbackname directly)
 * @param $callbackname the callback name (eg. form validation)
 * @param string $default (eg. the name of a default function to be returned if nothing else pans out)
 * @return string the name of a callable function or the default (which may be a callable function name)
 */
function y__plugin(array $info, string $type, string $callbackname, $default = ''): string {
  $callback = ($type === NULL)
    ? $info[$callbackname] ?? $default
    : $info[$type][$callbackname] ?? $default;
  if ($callback) {
    if (is_array($callback)) {
      if (!empty($callback['uri']) && file_exists($callback['uri'])) {
        require_once $callback['uri'];
      }
      $callbackname = $callback['function'] ?? $default;
    }
    else {
      $callbackname = $callback;
    }
  }
  else {
    $callbackname = $default;
  }
  $ret = function_exists($callbackname) ? $callbackname : $default;
  return $ret;
}

/**
 * Implements hook_init() and instantiates all Drupal hooks defined with the "hook" protocol
 * Another demonstration of how y can implement hooks for subscribing functions, it can do
 * hook_menu, hook_permission, and even do them dynamically, implementing the hooks as they are
 * discovered.
 * This is probably a really, super, bad idea and that's why it's commented, but it's pretty
 * cool. If y were incorporated into core, these sorts of things could happen automatically
 * at that level.
 * function _y_init() {
 * // Instantiate YAML-defined local hooks
 * if ( ($hookfunctiondefs = cache_get(__FUNCTION__)) === FALSE) {
 * $hookfunctiondefs = new stdClass();
 * $hookfunctiondefs->data = '';
 *
 * if ($hookdef = y__protocol_hook(NULL, 'local hooks')) {
 * foreach ($hookdef as $hookmodule => $hooks) {
 * foreach ($hooks as $hookname => $hookinfo) {
 * $hookfunctiondefs->data .= "\nfunction " . $hookmodule . '_' . $hookname . '(){return ' . var_export($hookinfo, TRUE) . ';}';
 * }
 * }
 * cache_set(__FUNCTION__, $hookfunctiondefs->data);
 * }
 * }
 * if (!empty($hookfunctiondefs->data)) {
 * try {
 * eval($hookfunctiondefs->data);
 * }
 * catch (ParseError $e) { // got to clear the error-full statement to be able to move forward.
 * cache_set( __FUNCTION__, FALSE );
 * _drupal_exception_handler( $e );
 * }
 * }
 * }
 */

/**
 * Y-defined version of Drupal's system_settings_form
 */
function y__system_settings_form($form, &$form_state, $protocol, $api, $module, $id) {
  $yinfo = y__protocol($protocol, $api, $module); // $yinfo = y__protocol('admin', 'form', 'y');
  foreach( $yinfo[$id] as $name => $forminfo ) {
    if( isset($forminfo['#variable_default']) )
      $forminfo['#default_value'] = variable_get($name, $forminfo['#variable_default']);
    $form[$name] = $forminfo;
  }
  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function y_menu() {
  return y__protocol_get_all('admin', 'menu', NULL, 1);
}

/**
 * Implements hook_permission().
 * For all modules implement Y admin protocol
 */
function y_permission() {
  return y__protocol_get_all('admin', 'permission', NULL, 1);
}

/**
 * Implements hook_hook_info();
 */
function y_hook_info() {
  return array( 'y' => array( 'group' => 'y' ) );
}

/**
 * Implements hook_help().
 * @param $path
 * @return bool|null|string
 */
function y_help($path) {
  $yinfo = y__protocol_get_all('admin', 'help', NULL, 1);
  if( !empty($yinfo[$path])) {
    return y__html($yinfo[$path]);
  }
  return FALSE;
}

/**
 * Debug function to just go emitting YAML elements wherever.
 * @param $elements
 */
function y__emit($elements) {
  if (FALSE) { // hooked in at drupal_render, just set true to start emitting stuff
    if (!$elements) {
      return;
    }
    $index = variable_get('yaml_render', 1);
    $type = '';
    if (isset($elements['#type'])) {
      $type = 'type_' . $elements['#type'];
    }
    else {
      if (isset($elements['#theme'])) {
        $type = 'theme_';
        if (is_array($elements['#theme'])) {
          $type .= implode('_', $elements['#theme']);
        }
        else {
          $type .= $elements['#theme'];
        }
      }
      else {
        if (isset($elements['#theme_wrappers'])) {
          $type = 'wrap_';
          if (is_array($elements['#theme_wrappers'])) {
            $type .= implode('_', $elements['#theme_wrappers']);
          }
          else {
            $type .= $elements['#theme_wrappers'];
          }
        }
      }
    }

    yaml_emit_file('yaml/' . str_pad($index, 4, '0', STR_PAD_LEFT) . '_' . $type . '.yaml', $elements);
    variable_set('yaml_render', ++$index);
  }
}

/**
 * Ensure term is standardized, either lower-case, space-delimited or CamelCase
 * @param $term
 * @param $format # output format is either 'camel' for camel case, or 'words' for lc words
 * @return string
 */
function y__term_normalize($term, $outputstyle) {
  if (empty($term)) {
    return $term;
  }
  if ($outputstyle == 'camel') { // return camelcase
    $term = (stristr($term, ' ') === FALSE)
      ? ucfirst($term)
      : strtr(ucwords($term), array(' ' => ''));
  }
  else {
    if (ctype_upper($term[0])) {
      $camelarray = y__term_camel2array($term);
      $term = strtolower(implode(' ', $camelarray));
    }
  }
  return $term;
}

/*
 * Convert a camelcase term into an array
 * Duplicate of qbxml_camelterm_to_array()
 */
function y__term_camel2array($camelterm) {
  $camelarray = array();
  $ret = preg_match_all('/[A-Z][a-z]+/', $camelterm, $camelarray);
  return ($ret == FALSE ? array() : $camelarray[0]);
}

/**
 * Utility function to output html from config file
 * html is of format:
 * - index: raw stuff to output or
 * - index:
 *     tag: stuff enclosed by tag or
 * - index:
 *   - tag: stuff enclosed by tag
 * @param $html
 * @return string
 */
function y__html( $html ) {
  $output = '';
  if (is_array($html)) {
    foreach ($html as $index => $info) {
      if (is_integer($index)) {
        foreach ($info as $tag => $text) {
          $output .= '<' . $tag . '>' . $text . '</' . $tag . '>';
        }
      }
      else {
        $output .= '<' . $index . '>' . $info . '</' . $index . '>';
      }
    }
  }
  else {
    $output .= $html;
  }
  
  return $output;
}

/**
 * Return Drupal relative path of a directory (needed for uninstalled modules that drupal_get_path() won't find.
 * @param $dir
 */
function y__drupal_path( $dir ) {
  $ret = $dir;
  $drupalpath = DRUPAL_ROOT;
  if( ($pos = stripos($dir, $drupalpath)) !== FALSE ) {
    $ret = substr( $dir, $pos + strlen($drupalpath)+1 );
  }
  return $ret; // not a meaningful result, but will generate a meaningfull error if it happens
}

/**
 * Implement hook_schema for anyone doing that. Tricky because module is not loaded when called on uninstall
 */
function y__hook_schema( $module, $dir, $includefile, $protoschemas ) {
  if( !empty($includefile) ) require_once $dir . '/' . $includefile;
  $ret = array();
  foreach( $protoschemas as $protoschema ) {
    $protocol = $protoschema['protocol'];
    $schema = $protoschema['api'];

    if (!($ret = y__protocol($protocol, $schema, $module))) {
      $hook_y = $module . '_y';
      y__register_extra_config(array(
        $module => array(
          'protocols implemented' => $hook_y(),
          'path' => y__drupal_path($dir)
        )
      )); // workaround to deal with uninstallation
      y__protocol($protocol, $schema, $module, $ret);
    }
  }
  return $ret;

}